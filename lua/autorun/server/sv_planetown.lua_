if XX then
	hook.Remove("PlayerNoClip", "SA_NoClip_Check")
	hook.Remove("OnEnvironmentChanged","SA_PlanetChanged")
	hook.Remove("PlayerDeath","SA_PlanetDeathChanged")
	hook.Remove("PlayerDisconnected","SA_PlanetDiscChanged")
	timer.Destroy("SA_ResyncPlanetOwnerStuff")
	timer.Destroy("SA_PlanetClaimThink")
	timer.Destroy("SA_PlanetMoneyThink")
end
XX = true

local SB3 = nil
local SB_AllPlanets = nil
local SA_CurrentClaims = {}
timer.Simple(1,function() SB3 = CAF.GetAddon("Spacebuild") end)

function SA_StartClaim(ply)
	local planet = SA_GetPlanet(ply)
	local planetID = planet:EntIndex()
	local SACC = SA_CurrentClaims[planetID]
	if SACC and not SACC[4] then
		SACC[4] = true
		local xFact = SA_Factions[ply:Team()]
		SystemSendMSG(nil,xFact[1].." "..xFact[7].." started to claim "..planet.sbenvironment.name.." ("..SACC[3].." seconds left)")
	end
	return ""
end
timer.Simple(0,function()
	SA_RegisterChatCommand("[claim",SA_StartClaim)
	SA_RegisterChatCommand("!claim",SA_StartClaim)
end)

timer.Create("SA_ResyncPlanetOwnerStuff",10,0,function()
	SB_AllPlanets = SB3:GetPlanets()
	for _,v in pairs(SB_AllPlanets) do
		if not v.IsProtected then
			v.PlyCount = {0,0,0,0,0,0}
		end
	end
	baseTable = nil
	for _,v in pairs(player.GetAll()) do
		if v:Alive() then
			local env = SA_GetPlanet(v)
			if env and env.PlyCount then
				local plT = v:Team()
				env.PlyCount[plT] = env.PlyCount[plT] + 1
			end
			v.CurPlanet = env
		end
	end
	for _,v in pairs(SB_AllPlanets) do
		SA_RefreshClaims(v)
	end
end)

timer.Create("SA_PlanetClaimThink",1,0,function()
	for planetID,v in pairs(SA_CurrentClaims) do
		local fact = v[1]
		local count = v[2]
		local time = v[3]
		if SA_FactionCanClaim(fact,count) then
			if v[4] then
				time = time - 1
				if time <= 0 then
					SA_ClaimPlanet(planetID,fact)
				elseif time % 10 == 0 then
					local xFact = SA_Factions[fact]
					local planet = ents.GetByIndex(planetID)
					SystemSendMSG(nil,tostring(time).." seconds left until "..xFact[1].." "..xFact[7].." claimed "..planet.sbenvironment.name)
				end
				v[3] = time
			end
		else
			SA_CurrentClaims[planetID] = nil
		end
	end
end)

timer.Create("SA_PlanetMoneyThink",5,0,function()
	--if true then return end
	for _,ply in pairs(player.GetAll()) do
		local vCP = ply.CurPlanet
		if vCP and SA_IsPlayerOwner(vCP,ply,true) then
			local cAm = 100 * vCP:GetNWInt("PlanetLevel")
			ply.Credits = ply.Credits + cAm
			ply.TotalCredits = ply.TotalCredits + cAm
			SA_Send_CredSc(ply)
		end
	end
end)

function SA_ClaimPlanet(planetID,fact)
	SA_CurrentClaims[planetID] = nil
	local planet = ents.GetByIndex(planetID)
	if (not (planet and planet.IsPlanet() and planet:IsPlanet())) or planet.IsProtected or planet.Owner == fact then return end
	planet:SetNWInt("PlanetOwner",fact)
	planet:SetNWInt("PlanetLevel",1)
	planet:SetNWInt("PlanetClaimTime",CurTime())
	local xFact = SA_Factions[fact]
	SystemSendMSG(nil,xFact[1].." "..xFact[7].." claimed "..planet.sbenvironment.name)
	SA_RefreshClaims(planet)
end

function SA_RefreshClaims(planet)
	if (not planet) or planet.IsProtected then return end
	local cClaimTime = 20
	local cTime = CurTime()
	local planetID = planet:EntIndex()
	local SACC = SA_CurrentClaims[planetID]
	local possibleClaim = SACC
	local plOwner = SA_GetPlanetOwner(planet)
	for k,v in pairs(planet.PlyCount) do
		if SA_FactionCanClaim(k,v) then
			if possibleClaim and possibleClaim[2] > 0 and possibleClaim[1] != k then
				if SACC and SACC[4] then
					local xFact = SA_Factions[k]
					local xFact2 = SA_Factions[SACC[1]]
					SystemSendMSG(nil,xFact[1].." "..xFact[7].." prevented "..xFact2[1].." from claiming "..planet.sbenvironment.name)
					SA_CurrentClaims[planetID] = nil
				end
				return
			end
			if (not possibleClaim) and plOwner != k then
				possibleClaim = {k,v,cClaimTime,false}
				SA_CurrentClaims[planetID] = possibleClaim
			end
		end
	end
	if plOwner > 0 and not (possibleClaim and possibleClaim[4]) then
		local plCount = planet.PlyCount[plOwner]
		local tmID = "SA_PlanetUpgrade_"..planetID
		local utChanged = false
		local timeLeft = 0
		if plCount > 0 then
			if not planet.UpgradeStarted then planet.UpgradeStarted = cTime end
			local oldTime = planet:GetNWInt("PlanetUpgradedTime")
			local upgradeTime = (1 * (2 ^ (planet:GetNWInt("PlanetLevel") - 1))) / plCount
			local finishedTime = planet.UpgradeStarted + upgradeTime
			planet:SetNWInt("PlanetUpgradedTime",finishedTime)
			timeLeft = math.max(0.1, finishedTime - cTime)
			--print(timeLeft)
			if finishedTime != oldTime then
				timer.Destroy(tmID)
				timer.Create(tmID,timeLeft,1,function()
					local pll = planet:GetNWInt("PlanetLevel")
					planet:SetNWInt("PlanetLevel",pll+1)
					planet:SetNWInt("PlanetUpgradedTime",0)
					planet.UpgradeStarted = nil
					timer.Simple(5,SA_RefreshClaims,planet)
					local xFact = SA_Factions[plOwner]
					SystemSendMSG(nil,xFact[1].." "..xFact[7].." upgraded "..planet.sbenvironment.name.." to level "..tostring(pll))
				end)
				utChanged = true
			end
		else
			planet.UpgradeStarted = nil
			planet:SetNWInt("PlanetUpgradedTime",0)
			timer.Destroy(tmID)
			utChanged = true
		end
		if utChanged then
			local pll = planet:GetNWInt("PlanetLevel")
			
		end
	end
end

local function PlayerNoClip(ply)
	if ply:IsAdmin() or ply:IsSuperAdmin() then return end
	local owner = SA_GetPlanetOwner(SA_GetPlanet(ply))
	if not SA_IsPlayerOwner(ply,owner) then return false end
end
hook.Add("PlayerNoClip", "SA_NoClip_Check", PlayerNoClip)

local function PlanetChanged(ply)
	if not (ply and ply.IsPlayer and ply:IsPlayer() and SB_AllPlanets) then return end
	local cPlyCP = ply.CurPlanet
	if cPlyCP and cPlyCP:IsValid() and cPlyCP.PlyCount then
		local cEnvPC = cPlyCP.PlyCount
		local pT = ply:Team()
		cEnvPC[pT] = cEnvPC[pT] - 1
		SA_RefreshClaims(cPlyCP)
	end
	local newEnv = SA_GetPlanet(ply)
	if newEnv and newEnv:IsValid() and newEnv.PlyCount then
		cEnvPC = newEnv.PlyCount
		cEnvPC[pT] = cEnvPC[pT] + 1
		SA_RefreshClaims(newEnv)
	end
	ply.CurPlanet = newEnv
end
hook.Add("OnEnvironmentChanged","SA_PlanetChanged",PlanetChanged)
hook.Add("PlayerDeath","SA_PlanetDeathChanged",PlanetChanged)
hook.Add("PlayerDisconnected","SA_PlanetDiscChanged",PlanetChanged)

function SA_GetPlanet(ply)
	if not (ply and ply:IsValid() and ply:Alive()) then return NULL end
	local plenv = ply.environment
	if not plenv then return NULL end
	local i = 0
	while not (plenv:IsPlanet() or i > 10) do
		plenv = plenv.environment
		if not plenv then return NULL end
		i = i + 1
	end
	if plenv:IsPlanet() then
		return plenv
	else
		return NULL --bwhahahahaha, invalid, mwahahahaha :D
	end
end

function SA_GetPlanetOwner(ent)
	if not (ent and ent.IsValid and ent:IsValid() and ent.IsPlanet and ent:IsPlanet()) then return 0 end
	return ent:GetNWInt("PlanetOwner")
end

function SA_IsPlayerOwner(ent,ply,forReal)
	local owner = SA_GetPlanetOwner(ent)
	if owner <= 0 and not forReal then return true end
	if owner == ply:Team() then return true end
end

function SA_FactionCanClaim(fact,count)
	if fact >= 2 and fact <= 5 and count >= 1 then return true end
	return false
end